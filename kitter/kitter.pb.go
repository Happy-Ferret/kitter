// Code generated by protoc-gen-go.
// source: kitter/kitter.proto
// DO NOT EDIT!

/*
Package kitter is a generated protocol buffer package.

It is generated from these files:
	kitter/kitter.proto

It has these top-level messages:
	Message
	Filter
	Error
*/
package kitter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Message struct {
	From    string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Filter struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Error encapsulates the details behind a failed request
type Error struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Message)(nil), "kitter.Message")
	proto.RegisterType((*Filter)(nil), "kitter.Filter")
	proto.RegisterType((*Error)(nil), "kitter.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Kitter service

type KitterClient interface {
	// Sends a greeting
	Keet(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Error, error)
	KeetStream(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Kitter_KeetStreamClient, error)
}

type kitterClient struct {
	cc *grpc.ClientConn
}

func NewKitterClient(cc *grpc.ClientConn) KitterClient {
	return &kitterClient{cc}
}

func (c *kitterClient) Keet(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/kitter.Kitter/Keet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitterClient) KeetStream(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Kitter_KeetStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Kitter_serviceDesc.Streams[0], c.cc, "/kitter.Kitter/KeetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kitterKeetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kitter_KeetStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type kitterKeetStreamClient struct {
	grpc.ClientStream
}

func (x *kitterKeetStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Kitter service

type KitterServer interface {
	// Sends a greeting
	Keet(context.Context, *Message) (*Error, error)
	KeetStream(*Filter, Kitter_KeetStreamServer) error
}

func RegisterKitterServer(s *grpc.Server, srv KitterServer) {
	s.RegisterService(&_Kitter_serviceDesc, srv)
}

func _Kitter_Keet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitterServer).Keet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitter.Kitter/Keet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitterServer).Keet(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitter_KeetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KitterServer).KeetStream(m, &kitterKeetStreamServer{stream})
}

type Kitter_KeetStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type kitterKeetStreamServer struct {
	grpc.ServerStream
}

func (x *kitterKeetStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Kitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kitter.Kitter",
	HandlerType: (*KitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keet",
			Handler:    _Kitter_Keet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeetStream",
			Handler:       _Kitter_KeetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("kitter/kitter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xc9, 0xd2, 0xa6, 0x38, 0x62, 0x0b, 0x23, 0x48, 0xe8, 0xa9, 0xec, 0x41, 0x3c, 0xb5,
	0x62, 0x0f, 0xde, 0x0b, 0x7a, 0x29, 0xc2, 0xb2, 0x7e, 0x82, 0xb8, 0x19, 0x97, 0xb0, 0x7f, 0x22,
	0xb3, 0xe3, 0xf7, 0x97, 0x4d, 0xb2, 0x17, 0x4f, 0x99, 0x37, 0x2f, 0xf3, 0xe6, 0xc7, 0xc0, 0x7d,
	0xe7, 0x45, 0x88, 0x4f, 0xe9, 0x39, 0xfe, 0x70, 0x90, 0x80, 0x3a, 0xa9, 0xf2, 0x15, 0x36, 0x1f,
	0x34, 0x4d, 0xb6, 0x25, 0x44, 0x58, 0x7d, 0x73, 0x18, 0x8c, 0x3a, 0xa8, 0xa7, 0x9b, 0x3a, 0xd6,
	0x68, 0x60, 0xd3, 0x84, 0x51, 0x68, 0x14, 0x53, 0xc4, 0xf6, 0x22, 0x4b, 0x03, 0xfa, 0xdd, 0xf7,
	0x42, 0x8c, 0x5b, 0x28, 0xbc, 0x8b, 0x53, 0xeb, 0xba, 0xf0, 0xae, 0x3c, 0xc3, 0xfa, 0x8d, 0x39,
	0xf0, 0x1c, 0xd8, 0x04, 0x47, 0xd9, 0x8a, 0x35, 0x3e, 0x80, 0x76, 0x24, 0xd6, 0xf7, 0x39, 0x2f,
	0xab, 0x17, 0x0b, 0xfa, 0x1a, 0x89, 0xf0, 0x11, 0x56, 0x57, 0x22, 0xc1, 0xdd, 0x31, 0x03, 0x67,
	0xbe, 0xfd, 0xdd, 0xd2, 0x48, 0xe9, 0x27, 0x80, 0xf9, 0xdf, 0xa7, 0x30, 0xd9, 0x01, 0xb7, 0x8b,
	0x99, 0xa0, 0xf6, 0xff, 0xa7, 0x9f, 0xd5, 0xe5, 0x00, 0xbb, 0x36, 0xf4, 0x76, 0x6c, 0x7f, 0xbb,
	0x6c, 0x5e, 0x6e, 0xd3, 0xce, 0x6a, 0x3e, 0x49, 0xa5, 0xbe, 0x74, 0xbc, 0xcd, 0xf9, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x4a, 0x83, 0xe0, 0x71, 0x32, 0x01, 0x00, 0x00,
}
